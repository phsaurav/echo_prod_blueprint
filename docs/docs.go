// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/poll": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new poll with a question and multiple options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Create a new poll",
                "parameters": [
                    {
                        "description": "Poll creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/poll.CreatePollRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created poll",
                        "schema": {
                            "$ref": "#/definitions/poll.CreatePollResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication required",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/poll/{id}": {
            "get": {
                "description": "Get poll details including available options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Get poll information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Poll ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Poll details with options",
                        "schema": {
                            "$ref": "#/definitions/poll.Poll"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - poll doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/poll/{id}/results": {
            "get": {
                "description": "Get the current vote counts for each option in a poll",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Get poll results",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Poll ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Poll results with options and vote counts",
                        "schema": {
                            "$ref": "#/definitions/poll.PollResultsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid poll ID format",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - poll doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/poll/{id}/vote": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Submit a vote for a specific option in a poll",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "polls"
                ],
                "summary": "Vote on a poll",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Poll ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Vote details with option_id",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/poll.VotePollRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vote successfully recorded with details",
                        "schema": {
                            "$ref": "#/definitions/poll.VotePollResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input or poll ID",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication required",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - user has already voted",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/login": {
            "post": {
                "description": "Authenticate a user and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully authenticated with JWT token",
                        "schema": {
                            "$ref": "#/definitions/user.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/register": {
            "post": {
                "description": "Create a new user account with username, email, and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully registered user",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - user doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.FailedResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "poll.CreatePollRequest": {
            "type": "object",
            "properties": {
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "["
                    ]
                },
                "question": {
                    "type": "string",
                    "example": "What is your favorite programming language?"
                }
            }
        },
        "poll.CreatePollResponse": {
            "type": "object",
            "properties": {
                "poll": {
                    "$ref": "#/definitions/poll.Poll"
                }
            }
        },
        "poll.Option": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "poll_id": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                },
                "votes": {
                    "type": "integer"
                }
            }
        },
        "poll.Poll": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/poll.Option"
                    }
                },
                "question": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "poll.PollResultsResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/poll.Option"
                    }
                },
                "poll_id": {
                    "type": "integer",
                    "example": 1
                },
                "question": {
                    "type": "string",
                    "example": "What is your favorite programming language?"
                },
                "total_votes": {
                    "type": "integer",
                    "example": 42
                }
            }
        },
        "poll.VotePollRequest": {
            "type": "object",
            "properties": {
                "option_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "poll.VotePollResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Vote recorded successfully"
                },
                "option_id": {
                    "type": "integer",
                    "example": 2
                },
                "poll_id": {
                    "type": "integer",
                    "example": 1
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-05-18T10:30:45Z"
                }
            }
        },
        "response.FailedResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code.",
                    "type": "integer",
                    "example": 500
                },
                "error": {
                    "description": "error message.",
                    "type": "string",
                    "example": "{$err}"
                },
                "message": {
                    "description": "Message corresponding to the status code.",
                    "type": "string",
                    "example": "internal_server_error"
                }
            }
        },
        "user.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "securePassword123"
                }
            }
        },
        "user.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "securePassword123"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "user.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "user.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Enter your JWT token directly (or optionally with 'Bearer ' prefix)",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "JonoMot",
	Description:      "A simple poll and voting API with user authentication",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
